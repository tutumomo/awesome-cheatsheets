/*******************************************************************************
 * Golang CHEATSHEET (中文速查表)  -  by chlins (created on 2018/02/14)
 * Version: 3, Last Modified: 2018/03/07 19:51
 * https://github.com/skywind3000/awesome-cheatsheets
 ******************************************************************************/



 /******************************************************************************
  * Go 編譯器命令
  *****************************************************************************/
go command [arguments]                              // go 命令 [參數]
go build                                            // 編譯包和依賴包
go clean                                            // 移除對像和緩存文件
go doc                                              // 顯示包的文檔
go env                                              // 打印go的環境變量信息
go bug                                              // 報告bug
go fix                                              // 更新包使用新的api
go fmt                                              // 格式規範化代碼
go generate                                         // 通過處理資源生成go文件
go get                                              // 下載並安裝包及其依賴
go install                                          // 編譯和安裝包及其依賴
go list                                             // 列出所有包
go run                                              // 編譯和運行go程序
go test                                             // 測試
go tool                                             // 運行給定的go工具
go version                                          // 顯示go當前版本
go vet                                              // 發現代碼中可能的錯誤

/*******************************************************************************
* ENV
*******************************************************************************/
GOOS                                                  // 編譯系統
GOARCH                                                // 編譯arch
GO111MODULE                                           // gomod開關
GOPROXY                                               // go代理 https://goproxy.io  https://goproxy.cn
GOSSAFUNC                                             // 生成SSA.html文件，展示代碼優化的每一步 GOSSAFUNC=func_name go build

/*******************************************************************************
 * Module
 *******************************************************************************/
go mod init                                           // 初始化當前文件夾，創建go.mod文件
go mod download                                       // 下載依賴的module到本地
go mod tidy                                           // 增加缺少的module，刪除無用的module
go mod vendor 					                              // 將依賴複製到vendor下
文件go.mod                                             // 依賴列表和版本約束
文件go.sum                                             // 記錄module文件hash值，用於安全校驗


/*******************************************************************************
 * 基本數據類型
 *******************************************************************************/
bool                                                   // 布爾
string                                                 // 字符串
int                                                    // 無符號整型(32位操作系統上為int32，64位操作系統上為int64)
int8                                                   // 8位無符號整型
int16                                                  // 16位無符號整型
int32                                                  // 32位無符號整型
int64                                                  // 64位無符號整型
uint                                                   // 有符號整型(32位操作系統上為uint32，64位操作系統上為uint64)
uint8                                                  // 8位有符號整型
uint16                                                 // 16位有符號整型
uint32                                                 // 32位有符號整型
uint64                                                 // 64位有符號整型
float32                                                // 32位浮點數，精確到小數點後7位
float64                                                // 64位浮點數，精確到小數點後15位
complex64                                              // 32位實數和虛數
complex128                                             // 64位實數和虛數
byte                                                   // 類型實際是一個uint8，代表了ASCII碼的一個字符
rune                                                   // 類型實際是一個int32，代表一個UTF-8字符


/*******************************************************************************
 * Hello World
 ******************************************************************************/
// main.go
package main                                        // 包名

import "fmt"                                        // 導入fmt包

func main() {                                       // 主函數
    fmt.Println("Hello World")                      // 打印輸出
}
// go run main.go                                   // 直接運行
// go build && ./main                               // 先編譯成二進制文件再運行



/*******************************************************************************
 * 操作符
 ******************************************************************************/
// 算數操作符
+ - * / %                                           // 加 減 乘 除 取余
& | ^ &^                                            // 位與 位或 位異或 位與非
<< >>                                               // 左移 右移
// 比較操作
== !=                                               // 等於 不等於
< <=                                                // 小於 小於等於
> >=                                                // 大於 大於等於
// 邏輯操作
&& || !                                             // 邏輯與 邏輯或 邏輯非
// 其他
& * <-                                              // 地址 指針引用 通道操作



/*******************************************************************************
 * 聲明
 ******************************************************************************/
a := 1                                              // 直接給一個未聲明的變量賦值
var b int                                           // var 變量名 數據類型 來聲明
var c float64
// 注意：使用var聲明過的變量不可再使用 := 賦值
a = 2
const d = 1                                         // 常量




/*******************************************************************************
 * 數據類型
 ******************************************************************************/
s := "hello"                                       // 字符
a := 1                                             // int
b := 1.2                                           // float64
c := 1 + 5i                                        // complex128
// 數組
arr1 := [3]int{4, 5, 6}                           // 手動指定長度
arr2 := [...]int{1, 2, 3}                         // 由golang自動計算長度
// 切片
sliceInt := []int{1, 2}                           // 不指定長度
sliceByte := []byte("hello")
// 指針
a := 1
point := &a                                      // 將a的地址賦給point


/*******************************************************************************
 * 流程控制
 ******************************************************************************/
// for
i := 10
for i > 0 {
    println(i--)
}
// if else
if i == 10 {
    println("i == 10")
} else {
    println("i != 10")
}
// if with init 
m := map[int]int{1:1}
if v, ok := m[1]; ok {
    println(v)
}
// switch
switch i {
case 10:
    println("i == 10")
default:
    println("i != 10")
}
// 三目表達式
注意：Golang沒有三目表達式


/*******************************************************************************
 * 函數
 ******************************************************************************/
// 以func關鍵字聲明
func test() {}

f := func() {println("Lambdas function")}     // 匿名函數
f()

func get() (a,b string) {                    // 函數多返回值
    return "a", "b"
}
a, b := get()




/*******************************************************************************
 * 結構體
 ******************************************************************************/
// golang中沒有class只有struct
type People struct {
  Age int                                  // 大寫開頭的變量在包外可以訪問
  name string                              // 小寫開頭的變量僅可在本包內訪問
}
p1 := People{25, "Kaven"}                 // 必須按照結構體內部定義的順序
p2 := People{name: "Kaven", age: 25}      // 若不按順序則需要指定字段

// 也可以先不賦值
p3 := new(People)
p3.Age = 25
p3.name = "Kaven"


/*******************************************************************************
 * 方法
 ******************************************************************************/
// 方法通常是針對一個結構體來說的
type Foo struct {
  a int
}
                                        // 值接收者
func (f Foo) test() {
  f.a = 1                              // 不會改變原來的值
}
                                      // 指針接收者
func (f *Foo) test() {
  f.a = 1                            // 會改變原值
}



/*******************************************************************************
 * go 協程
 ******************************************************************************/
go func() {
    time.Sleep(10 * time.Second)
    println("hello")
}()                                // 不會阻塞代碼的運行 代碼會直接向下運行
// channel 通道
c := make(chan int)
// 兩個協程間可以通過chan通信
go func() {c <- 1}()              // 此時c會被阻塞 直到值被取走前都不可在塞入新值
go func() {println(<-c)}()
// 帶緩存的channel
bc := make(chan int, 2)
go func() {c <- 1; c <-2}()      // c中可以存儲聲明時所定義的緩存大小的數據，這裡是2個
go func() {println(<-c)}()



/*******************************************************************************
 * 接口
 ******************************************************************************/
// go的接口為鴨子類型，即只要你實現了接口中的方法就實現了該接口
type Reader interface {
    Reading()                  // 僅需實現Reading方法就實現了該接口
}

type As struct {}
func (a As) Reading() {}      // 實現了Reader接口

type Bs struct {}
func (b Bs) Reading() {}      // 也實現了Reader接口
func (b Bs) Closing() {}


/*******************************************************************************
 * 泛型（v1.18）
 ******************************************************************************/
func Sum[T int | float32 | float64](x, y T) T {
	return x + y
}

type Number interface {
	int | int32 | int64 | float64 | float32
}

type SliceAdditon[T Number] struct {
	data []T
}

func (sa *SliceAdditon[T]) Sum() T {
	var sum T
	for _, v := range sa.data {
		sum += v
	}
	return sum
}

func Caller() {
	sInt := Sum(1, 2)       // Sum[int]
	sFloat := Sum(1.1, 2.2) // Sum[float64]
	println(sInt, sFloat)

	saInt := SliceAdditon[int]{data: []int{1, 2, 3, 4, 5}}
	saFloat64 := SliceAdditon[float64]{data: []float64{1.1, 2.2, 3.3, 4.4, 5.5}}
	println(saInt.Sum())
	println(saFloat64.Sum())
}

/*******************************************************************************
 * 一些推薦
 ******************************************************************************/
// 入門書籍
《Go學習筆記》                // 雨痕的
《Go語言實戰》                // 強烈推薦
// 網上資料
https://github.com/astaxie/build-web-application-with-golang    // 謝大的
https://github.com/Unknwon/the-way-to-go_ZH_CN                  // 無聞
https://github.com/Unknwon/go-fundamental-programming           // 無聞教學視頻
// 第三方類庫
https://golanglibs.com/
// 大雜燴
https://github.com/avelino/awesome-go



/*******************************************************************************
 * References
 ******************************************************************************/
https://github.com/a8m/go-lang-cheat-sheet
https://github.com/LeCoupa/awesome-cheatsheets
