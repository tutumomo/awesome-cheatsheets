##############################################################################
# GIT CHEATSHEET (中文速查表)  -  by albertwang21 (created on 2019/09/16)
# Version: 1, Last Modified: 2019/09/16 18:00
# https://github.com/skywind3000/awesome-cheatsheets
##############################################################################


##############################################################################
# 配置
##############################################################################
git config --global "Your Name"
git config --global "Email Address"
git config --global credential.helper store    保存密碼(每次要輸密碼/重複輸密碼)
git config user.name "Your Name" 配置當前倉庫用戶名
git config user.email "Email Address" 配置當前倉庫郵箱地址


##############################################################################
# 初始化
##############################################################################
git init


##############################################################################
# 提交修改
##############################################################################
git add <file>
git add -u 提交work directory中所有已track的文件至staging area
git commit -m "descriptions"
git commit --amend 對最近一次的提交做內容修改
git commit --amend --author "user_name <user_email>" 修改最近提交用戶名和郵箱


##############################################################################
# 查看狀態、比對
##############################################################################
git status
git status -s 文件狀態縮略信息, 常見 A:新增; M:文件變更; ?:未track; D:刪除
git diff <file>
git diff HEAD -- <file>                 查看工作區和版本庫裡面最新版本的區別
git diff --check <file>                 檢查是否有空白錯誤(regex:' \{1,\}$')
git diff --cached <file>                查看已add的內容(綠M)
git diff branch1 branch2 --stat         查看兩個分支差異
git diff branch1 branch2 <file...>      查看分支文件具體差異

##############################################################################
# 查看歷史版本、歷史操作
##############################################################################
git log
git reflog
git log -n                  最近n條的提交歷史
git log <branch_name> -n    分支branch_name最近n條的提交歷史
git log --stat              歷次commit的文件變化
git log --shortstat         對比--stat只顯示最後的總文件和行數變化統計(n file changed, n insertions(+), n deletion(-))
git log --name-status       顯示新增、修改、刪除的文件清單
git log lhs_hash..rhs_hash  對比兩次commit的變化(增刪的主語為lhs, 如git log HEAD~2..HEAD == git log HEAD -3)
git log -p                  歷次commit的內容增刪
git log -p -W               歷次commit的內容增刪, 同時顯示變更內容的上下文
git log origin/EI-1024 -1 --stat -p -W 查看遠端分支EI-1024前一次修改的詳細內容
git log origin/master..dev --stat -p -W 查看本地dev分支比遠端master分支變化(修改)的詳細內容

git log <branch_name> --oneline   對提交歷史單行排列
git log <branch_name> --graph     對提交歷史圖形化排列
git log <branch_name> --decorate  對提交歷史關聯相關引用, 如tag, 本地遠程分支等
git log <branch_name> --oneline --graph --decorate 拼接一下, 樹形化顯示歷史
git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen%ai(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit 同上, 建議alais保存

git log --pretty=format 常用的選項(摘自progit_v2.1.9)
%H 提交對像（commit）的完整哈希字串
%h 提交對象的簡短哈希字串
%T 樹對像（tree）的完整哈希字串
%t 樹對象的簡短哈希字串
%P 父對像（parent）的完整哈希字串
%p 父對象的簡短哈希字串
%an 作者（author）的名字
%ae 作者的電子郵件地址
%ad 作者修訂日期（可以用 --date= 選項定制格式）
%ar 作者修訂日期，按多久以前的方式顯示
%cn 提交者（committer）的名字
%ce 提交者的電子郵件地址
%cd 提交日期
%cr 提交日期，按多久以前的方式顯示
%s 提交說明

git log --since --after     顯示時間之後的提交
git log --until --before    顯示時間之前的提交
git --author                顯示指定作者的提交
git --committer             顯示指定committer的提交(注:committer不一定是author)
git log -S [keyword]        僅顯示添加或移除了某個關鍵字的提交(某些場景比單獨git log -p | grep [keyword] 好用很多)
git log origin/b3.3/master --author=yx-ren --since="2019-10-01" --before="2019-11-01" 查看某作者在某發佈版本最近一個月的提交, 常見於線上背鍋
git log origin/b3.0/master --author=some_leave --since="1 month ago" 查看某剛離職同事過去一個月的提交, 常見於背鍋
git log --since=1.weeks     過去一周的提交(寫週報的時候可以看看我這一周干了啥)
git log --since=1.days      過去一天的提交(下班的時候可以看看我這一天干了啥)
git log --since="1 weeks 2 days 3 hours 40 minutes 50 seconds ago" 過去1周2天3小時40分50秒之內的提交


##############################################################################
# 版本回退、前進
##############################################################################
git reset --hard HEAD^      回退到上1版本
git reset --hard HEAD~5     回退到上5個版本
git reset --hard id         回退到指定版本


##############################################################################
# 撤銷修改
##############################################################################
git checkout -- <file>      撤銷修改：誤修改工作區文件，未git add/commit
git restore <file>          撤銷修改：誤修改工作區文件，未git add/commit
git reset HEAD <file>       撤銷git add：誤將文件加入暫存區（git add），未git commit
git reset --hard HEAD^      撤銷git commit：誤將文件提交（一旦提交，只能通過版本回退進行撤銷）


##############################################################################
# 刪除與恢復
##############################################################################
git rm/add <file>
git commit -m "remove <file>"   刪除版本庫中的<file>：刪除工作區文件後，繼續刪除版本庫中相應的文件
git checkout -- <file>          根據版本庫中的<file>恢復工作區<file>
git restore <file>              對於 checkout -- <file> 的新寫法 (2.23 引入)

##############################################################################
# 清理工作區未track也未ignore的文件或文件夾(如各種臨時.swp, .patch文件等)
##############################################################################
git clean -i    #交互式清理, 不常用
git clean -n    #查看清理文件列表(不包括文件夾), 不執行實際清理動作
git clean -n -d #查看清理文件列表(包括文件夾), 不執行實際清理動作
git clean -f    #清理所有未track文件
git clean -df   #清理所有未track文件和文件夾, 常用, 但使用前確保新增加的文件或文件夾已add, 否則新創建的文件或者文件夾也會被強制刪除

##############################################################################
# 關聯GitHub遠程倉庫（本地到遠程）
##############################################################################
git remote add origin <remote address>    在本地工作區目錄下按照 GitHub 提示進行關聯
git remote rm origin                      解除錯誤關聯
git push -u origin master                 第一次將本地倉庫推送至遠程倉庫（每次在本地提交後進行操作）
git push origin master                    以後每次將本地倉庫推送至遠程倉庫（每次在本地提交後進行操作）
<remote address>:
    git@github.com:<username>/<repository>.git
    https://github.com/<username>/<repository>.git


##############################################################################
# 克隆GitHub遠程倉庫（遠程到本地）
##############################################################################
git clone <remote address>    git協議速度更快但通常公司內網不允許，https協議速度慢


##############################################################################
# 分支管理：創建、切換、查看、合併、刪除
##############################################################################
git branch <branch name>            創建<branch name>分支
git checkout <branch name>          切換至<branch name>分支
git switch <branch name>            切換至<branch name>分支 (2.23 引入)
git checkout -b <branch name>       創建並切換至<branch name>分支
git switch -c <branch name>         創建並切換至<branch name>分支
git checkout origin/master -b <branch name> 基於遠程倉庫<origin>下的<master>分支創建一個新的分支
git branch                          查看已有分支（* 表示當前分支）
git merge <branch name>             合併<branch name>到當前分支（通常在master分支下操作）
git merge --no-commit <branch name> 合併<branch name>到當前分支，但不提交
git branch -d <branch name>         刪除分支
git branch -m oldbranchname newname 重命名分支


##############################################################################
# 解決合併衝突
##############################################################################
合併時報錯「分支發生衝突」，首先vim相應文件，修改衝突位置，然後按照git add/commit重新提交，最後刪除多餘分支即可。
git log --graph --pretty=oneline --abbrev-commit
git log --graph


##############################################################################
# 分支管理：合併後刪除分支也在 log 中保留分支記錄
##############################################################################
git merge --no-ff -m "descriptions" <branch name>


##############################################################################
# 開發流程：
##############################################################################
master分支              發佈穩定版本
dev分支                 發佈開發版本
<developer name>分支    個人開發分支（個人開發完成將該分支併入dev，同時保留該分支，繼續開發）


##############################################################################
# Bug分支管理（建立單獨分支進行bug修復）
##############################################################################
軟件開發中，bug就像家常便飯一樣。有了bug就需要修復，在Git中，由於分支是如此的強大，所以，每個bug都可以通過一個新的臨時分支來修復，修復後，合併分支，然後將臨時分支刪除。
git stash                   保存當前工作現場（在dev未完成開發，但master有bug需要修復）
git stash pop               回到dev分支後恢復工作現場（list中的現場會同時被刪除）
git stash list              查看當前存儲的工作現場
git stash apply stash@{#}   回到指定工作現場（list中的現場不會被刪除，需要用git stash drop）
git stash drop stash@{#}    刪除指定工作現場
git cherry-pick <id>        在master修復好bug後，在dev複製一遍bug修復流程


##############################################################################
# Feature分支管理（建立單獨分支添加新功能）
##############################################################################
軟件開發中，總有無窮無盡的新的功能要不斷添加進來。添加一個新功能時，你肯定不希望因為一些實驗性質的代碼，把主分支搞亂了，所以，每添加一個新功能，最好新建一個feature分支，在上面開發，完成後，合併，最後，刪除該feature分支。
git branch -D <branch name>    強制刪除分支（丟棄未合併分支）


##############################################################################
# 協作與分支推送
##############################################################################
User 1:
git remote [-v]                        查看遠程庫信息（-v 查看詳細信息）
git remote update origin --prune       更新分支列表(更新遠程分支列表)
git remote update origin -p            更新分支列表(更新遠程分支列表)
git push origin [master/dev/...]       推送指定分支到遠程
User 2:
git clone <remote address>             克隆到本地（只能克隆master）
git checkout -b dev origin/dev         本地新建分支並關聯遠程
git add/commit/push                    添加、提交、推送更新
User 1:
git add/commit/push                    推送時報錯（與user 2推送的更新衝突）
git pull <remote> <branch>
git branch --set-upstream-to=origin/<branch> <branch>    本地與遠程關聯
git pull                               拉取遠程文件（並解決衝突）
git commit/push                        重新提交並推送


##############################################################################
# 標籤管理（常用於版本管理）：查看、創建、操作
##############################################################################
git tag                                                     查看標籤
git show <tag name>                                         查看指定標籤
git log --pretty=oneline --abbrev-commit --decorate=full    在log中顯示標籤
git tag <tag name>                                          為上次commit位置打標籤
git tag <tag name> <commit id>                              為指定commit位置打標籤
git tag -a <tag name> -m "descriptions" <commit id>         為指定commit打標並添加描述
git tag -d <tag name>                                       刪除本地標籤
git push origin <tag name>                                  推送指定標籤到遠程
git push origin --tags                                      推送所有本地標籤到遠程
git push origin :refs/tags/<tag name>                       刪除遠程標籤（先刪除本地標籤）

##############################################################################
# rebase(換基)
##############################################################################
# rebase 在日常中常用功能主要是兩個, 多人協同開發定期rebase master以及壓縮某分支多個commit
git rebase master 常見於多人開發, 每個開發人員從master checkout出自己的分支, 開發一段時間後提交至master之前最好rebase一下, 防止衝突,
              就算真有衝突在本地解決好過強制提交, 開發流程中盡量保證master的乾淨整潔

舉個例子:
master分支上有三個提交C1, C2, C3
某一時刻usr1在C3的master分支上checkout出新的分支, 用於開發服務端支持ipv6新特性, 並提交了C4, C5
git checkout -b ipv6_support
......
git commit -m C4
......
git commit -m C5
此時提交狀態如下所示
      (origin/master branch)
             |
C1 <- C2 <- C3
             \
              \
               \
                C4 <- C5
                       |
                (ipv6_support branch)

某同事usr2修改了master上的內存洩漏錯誤, 並提交了C6, C7, C8三個commit, 然後直接推送origin/master(假設這個期間無其他人推新內容到master)
此時提交狀態如下所示
                    (origin/usr2/fix_mem_leak branch)
                               |
C1 <- C2 <- C3 <- C6 <- C7 <- C8
             \                 |
              \         (origin/master branch)
               \
                C4 <- C5
                       |
                (ipv6_support branch)

如果此時usr1希望將ipv6的新特性提交至master, 那麼在其直接push origin master時會提示master需要合併分支ipv6_support
雖然C4, C5的改動內容完全獨立於C6, C7, C8的改動
但git仍會抓取C5和C8的提交並產生一個新的C9 commit(因兩者分支的base不同), 如下圖所示
C1 <- C2 <- C3 <- C6 <- C7 <- C8
             \                 \
              \                 \
               \                 \
                C4 <- C5 <------ C9

如果是為了保證master提交記錄的"乾淨完整"
或者是某分支不著急提交, 仍需要更多的測試與開發, 但又不想分支開發週期結束後"偏離"當初checkout的master分支太久遠(容易造成更多的衝突)
可以考慮(定期)利用rebase來進行變基
即上面提到過的多人協同開發, 定期rebase master是個好習慣
git checkout ipv6_support
git rebase master
結果提交狀態如下所示
            (origin/master origin/usr2/fix_mem_leak branch)
                               |
C1 <- C2 <- C3 <- C6 <- C7 <- C8
                                \
                                 \
                                  \
                                   C4' <- C5'
                                           |
                                    (ipv6_support branch)
這種rebase在功能上類似將某分支所有的改動做成多個patch並依次打在指定的新base上
此時再提交master就不會產生抓取效果, 會將C4'和C5'直接提交至master, 即can be fast-forwarded, 同時也保證了master提交記錄的整潔性
(注: 雖然C4'和C5'的內容和C4, C5完全一致, 但兩者base不同, commit hash code也完全不同)

git rebase --noto <branch_lhs> <branch_rhs> #重放, 用於變基在分支branch_lhs中而不在branch_rhs中的commit
#某項目狀態分支如下所示, 其中Cn的數字代表提交時間順
# T1 某員工urs1從C2(master分支)checkout出一個新的分支用於開發某基礎公共組件功能
# T2 員工usr1開發完畢提交C3, 然後繼續在該分支上(或checkout -b server)開發服務端相關功能, 並提交C4
# T3 master分支有更新, 其他同事usr2提交了C5, C6並推送到了origin master
# T4 員工usr1從server分支切回到C3公共基礎的提交, 並創建新分支client, 用於開發客戶端功能, 並提交C8, C9
# T5 員工usr1從client分支切回到server分支繼續開發服務端功能, 並提交C10
            (master branch)
                   |
C1 <- C2 <- C5 <- C6
         \
          \
           \
            C3 <- C4 <- C10
               \         |
                \ (server branch)
                 \
                  C8 <- C9
                         |
                  (client branch)

# 此時該員工希望將客戶端相關的功能合併到主分支並發佈，但暫時並不想合併 server 中的修改，因為它們還需要經
# 過更全面的測試。 這時可以使用 git rebase 命令的 --onto 選項，選中在 client 分支裡但不在
# server 分支裡的修改（即 C8 和 C9），將它們在 master 分支上重放：

git rebase --noto client server
# 得到如下圖所示的提交狀態
# 注:其中C3', C8', C9'與C3, C8, C9的提交內容完全一樣, 但是hash id是完全不同的
            (master branch)(client branch)
                   |            |
C1 <- C2 <- C5 <- C6 <- C8' <- C9'
         \
          \
           \
            C3 <- C4 <- C10
               \         |
                \ (server branch)
                 \
               [#####disable######]
               [  C8 <- C9        ]
               [         |        ]
               [  (client branch) ]

#can be fast-forwarded
git checkout master
git merge client
# 提交後分支狀態如下
                                (client branch)
                                       |
C1 <- C2 <- C5 <- C6 <- C3' <- C8' <- C9'
         \                             |
          \                     (master branch)
           \
            C3 <- C4 <- C10
                         |
                  (server branch)

git rebase -i HEAD~n 壓縮當前分支的n個commit併合並為1個commit, 常見第一行為pick, 剩下的n-1行為squash

git rebase --abort # rebase過程中發生錯誤, 可以利用該命令終止整個rebase過程
git rebase --continue # rebase過程中發生衝突, 在解決衝突後可以利用該命令進行後續過程

##############################################################################
# 打patch(補丁)
##############################################################################
# 生成diff patch文件(git可以識別diff文件)
git <branch> log -n -p > diff.patch # 生成某分支過去n個commit的文件diff信息至單個diff文件
git diff <--cached> diff.patch # 針對當前緩存區的內容生成diff文件

# 利用apply打patch
git apply --check diff.patch    #檢查是否可以正常應用, 無回顯證明無衝突
git apply --stat diff.patch     #查看應用diff文件後的文件變化
git apply diff.patch            #打patch, 僅僅改變文件信息, 無commit信息, 仍然需要add, commit

# 利用--format-patch生成patch, 帶commit信息
git format-patch <branch> -n 　 #生成分支<branch>最近的n次commit的patch
git format-patch <r1>..<r2>     #生成兩個commit間的修改的patch（包含兩個commit. <r1>和<r2>都是具體的commit號)
git format-patch -1 <r1>        #生成單個commit的patch
git format-patch <r1>           #生成某commit以來的修改patch（不包含該commit）
git format-patch --root <r1>　　#生成從根到r1提交的所有patch

# 利用am打patch
git apply --check 0001-update-bash.sh.patch #檢查patch是否衝突可用
git apply --stat 0001-update-bash.sh.patch  #檢查patch文件變更情況, 無回顯證明無衝突
git am 0001-update-bash.sh.patch            #將該patch打上到當前分支, 帶commit信息
git am ./*.patch                            #將當前路徑下的所有patch按照先後順序打上
git am --abort                              #終止整個打patch的過程, 類似rebase --abort
git am --resolved                           #解決衝突後, 可以執行該命令進行後續的patch, 類似rebase --continue

##############################################################################

##############################################################################
# bundle(打包)
##############################################################################
# 該命令會將git工程打包, 默認情況下會打包所有commit記錄和track的文件
# 不同於簡單粗暴tar.gz打包整個文件夾, bundle只打包那些push過的記錄
# 如某git工程下存在.build構建後的目錄, 而.gitignore又忽略了該文件夾
# 如果利用tar.gz打包則會將那些忽略的文件文件夾一併打包, 可能會造成壓縮包極大的臃腫
# 而又不想僅僅為了打個包就刪除整個build目錄(如重新build時間成本太大)
# 那麼就可以使用bundle進行打包, 該命令只打包track過的文件
# 並且像url那樣直接調用git clone來重建
git bundle create awesome-cheatsheets.bundle HEAD master #打包重建master分支的所有數據
git clone awesome-cheatsheets.bundle # 重建工程

# bundle也可以打包指定的區間, 至於提交區間有多種表示方式
git bundle create awesome-cheatsheets.bundle HEAD~10
git bundle create awesome-cheatsheets.bundle HEAD~10..HEAD
git bundle create awesome-cheatsheets.bundle lhs_commit_md5..rhs_commit_md5
git bundle create awesome-cheatsheets.bundle origin/master..master
git bundle create awesome-cheatsheets.bundle master ^origin/master


##############################################################################
# 使用GitHub
##############################################################################
fork --> clone --> add/commit/push --> pull request


##############################################################################
# 其他配置
##############################################################################
git config --global color.ui true    顯示顏色


##############################################################################
# 配置.gitignore文件
##############################################################################
/<dir name>/                    忽略文件夾
*.zip                           忽略.zip文件
/<dir name>/<file name>         忽略指定文件


##############################################################################
# 文件.gitignore生效後
##############################################################################
git add -f <file>               強制添加
git check-ignore -v <file>      查看生效規則


##############################################################################
# 配置別名
##############################################################################
git config [--global] alias.<alias> '<original command>'    為所有工作區/當前工作區配置別名
.git/config             當前工作區的配置文件
~/.gitconfig            當前用戶的配置文件


##############################################################################
# References
##############################################################################
https://www.liaoxuefeng.com/wiki/896043488029600
https://git-scm.com/book/en/v2

##############################################################################
# 子模塊
##############################################################################
git submodule foreach git pull    子模塊更新

