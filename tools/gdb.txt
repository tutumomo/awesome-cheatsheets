##############################################################################
# GDB CHEATSHEET (中文速查表)  -  by skywind (created on 2018/02/20)
# Version: 9, Last Modified: 2023/06/26 14:31
# https://github.com/skywind3000/awesome-cheatsheets
##############################################################################


##############################################################################
# 啟動 GDB
##############################################################################

gdb object                # 正常啟動，加載可執行
gdb object core           # 對可執行 + core 文件進行調試
gdb object pid            # 對正在執行的進程進行調試
gdb                       # 正常啟動，啟動後需要 file 命令手動加載
gdb -tui                  # 啟用 gdb 的文本界面（或 ctrl-x ctrl-a 更換 CLI/TUI）


##############################################################################
# 幫助信息
##############################################################################

help                      # 列出命令分類
help running              # 查看某個類別的幫助信息
help run                  # 查看命令 run 的幫助
help info                 # 列出查看程序運行狀態相關的命令
help info line            # 列出具體的一個運行狀態命令的幫助
help show                 # 列出 GDB 狀態相關的命令
help show commands        # 列出 show 命令的幫助


##############################################################################
# 斷點
##############################################################################

break main                # 對函數 main 設置一個斷點，可簡寫為 b main
break 101                 # 對源代碼的行號設置斷點，可簡寫為 b 101
break basic.c:101         # 對源代碼和行號設置斷點
break basic.c:foo         # 對源代碼和函數名設置斷點
break *0x00400448         # 對內存地址 0x00400448 設置斷點
info breakpoints          # 列出當前的所有斷點信息，可簡寫為 info break
delete 1                  # 按編號刪除一個斷點
delete                    # 刪除所有斷點
clear                     # 刪除在當前行的斷點
clear function            # 刪除函數斷點
clear line                # 刪除行號斷點
clear basic.c:101         # 刪除文件名和行號的斷點
clear basic.c:main        # 刪除文件名和函數名的斷點
clear *0x00400448         # 刪除內存地址的斷點
disable 2                 # 禁用某斷點，但是不刪除
enable 2                  # 允許某個之前被禁用的斷點，讓它生效
rbreak {regexpr}          # 匹配正則的函數前斷點，如 ex_* 將斷點 ex_ 開頭的函數
tbreak function|line      # 臨時斷點
hbreak function|line      # 硬件斷點
ignore {id} {count}       # 忽略某斷點 N-1 次
condition {id} {expr}     # 條件斷點，只有在條件生效時才發生
condition 2 i == 20       # 2號斷點只有在 i == 20 條件為真時才生效
watch {expr}              # 對變量設置監視點
info watchpoints          # 顯示所有觀察點
catch exec                # 斷點在exec事件，即子進程的入口地址


##############################################################################
# 運行程序
##############################################################################

run                       # 運行程序
run {args}                # 以某參數運行程序
run < file                # 以某文件為標準輸入運行程序
run < <(cmd)              # 以某命令的輸出作為標準輸入運行程序
run <<< $(cmd)            # 以某命令的輸出作為標準輸入運行程序
set args {args} ...       # 設置運行的參數
show args                 # 顯示當前的運行參數
continue                  # 繼續運行，可簡寫為 c 或 cont
step                      # 單步進入，碰到函數會進去（Step in）
step {count}              # 單步多少次
next                      # 單步跳過，碰到函數不會進入（Step Over）
next {count}              # 單步多少次
finish                    # 運行到當前函數結束（Step Out）
until                     # 持續執行直到代碼行號大於當前行號（跳出循環）
until {line}              # 持續執行直到執行到某行
CTRL+C                    # 發送 SIGINT 信號，中止當前運行的程序
attach {process-id}       # 鏈接上當前正在運行的進程，開始調試
detach                    # 斷開進程鏈接
kill                      # 殺死當前運行的函數


##############################################################################
# 棧幀
##############################################################################

bt                        # 打印 backtrace （命令 where 是 bt 的別名）
frame                     # 顯示當前運行的棧幀
up                        # 向上移動棧幀（向著 main 函數）
down                      # 向下移動棧幀（遠離 main 函數）
info locals               # 打印幀內的相關變量
info args                 # 打印函數的參數


##############################################################################
# 代碼瀏覽
##############################################################################

list 101                  # 顯示第 101 行周圍 10行代碼
list 1,10                 # 顯示 1 到 10 行代碼
list main                 # 顯示函數周圍代碼
list basic.c:main         # 顯示另外一個源代碼文件的函數周圍代碼
list -                    # 重複之前 10 行代碼
list *0x22e4              # 顯示特定地址的代碼
cd dir                    # 切換當前目錄
pwd                       # 顯示當前目錄
search {regexpr}          # 向前進行正則搜索
reverse-search {regexp}   # 向後進行正則搜索
dir {dirname}             # 增加源代碼搜索路徑
dir                       # 復位源代碼搜索路徑（清空）
show directories          # 顯示源代碼路徑


##############################################################################
# 瀏覽數據
##############################################################################

print {expression}        # 打印表達式，並且增加到打印歷史
print /x {expression}     # 十六進制輸出，print 可以簡寫為 p
print array[i]@count      # 打印數組範圍
print $                   # 打印之前的變量
print *$->next            # 打印 list
print $1                  # 輸出打印歷史裡第一條
print ::gx                # 將變量可視範圍（scope）設置為全局
print 'basic.c'::gx       # 打印某源代碼裡的全局變量，(gdb 4.6)
print /x &main            # 打印函數地址
x *0x11223344             # 顯示給定地址的內存數據
x /nfu {address}          # 打印內存數據，n是多少個，f是格式，u是單位大小
x /10xb *0x11223344       # 按十六進制打印內存地址 0x11223344 處的十個字節
x/x &gx                   # 按十六進制打印變量 gx，x和斜桿後參數可以連寫
x/4wx &main               # 按十六進制打印位於 main 函數開頭的四個 long 
x/gf &gd1                 # 打印 double 類型
help x                    # 查看關於 x 命令的幫助
info locals               # 打印本地局部變量
info functions {regexp}   # 打印函數名稱
info variables {regexp}   # 打印全局變量名稱
ptype name                # 查看類型定義，比如 ptype FILE，查看 FILE 結構體定義
whatis {expression}       # 查看表達式的類型
set var = {expression}    # 變量賦值
display {expression}      # 在單步指令後查看某表達式的值
undisplay                 # 刪除單步後對某些值的監控
info display              # 顯示監視的表達式
show values               # 查看記錄到打印歷史中的變量的值 (gdb 4.0)
info history              # 查看打印歷史的幫助 (gdb 3.5)


##############################################################################
# 目標文件操作
##############################################################################

file {object}             # 加載新的可執行文件供調試
file                      # 放棄可執行和符號表信息
symbol-file {object}      # 僅加載符號表
exec-file {object}        # 指定用於調試的可執行文件（非符號表）
core-file {core}          # 加載 core 用於分析


##############################################################################
# 信號控制
##############################################################################

info signals              # 打印信號設置
handle {signo} {actions}  # 設置信號的調試行為
handle INT print          # 信號發生時打印信息
handle INT noprint        # 信號發生時不打印信息
handle INT stop           # 信號發生時中止被調試程序
handle INT nostop         # 信號發生時不中止被調試程序
handle INT pass           # 調試器接獲信號，不讓程序知道
handle INT nopass         # 調試器不接獲信號
signal signo              # 繼續並將信號轉移給程序
signal 0                  # 繼續但不把信號給程序


##############################################################################
# 線程調試
##############################################################################

info threads              # 查看當前線程和 id
thread {id}               # 切換當前調試線程為指定 id 的線程
break {line} thread all   # 所有線程在指定行號處設置斷點
thread apply {id..} cmd   # 指定多個線程共同執行 gdb 命令
thread apply all cmd      # 所有線程共同執行 gdb 命令
set schedule-locking ?    # 調試一個線程時，其他線程是否執行，off|on|step
set non-stop on/off       # 調試一個線程時，其他線程是否運行
set pagination on/off     # 調試一個線程時，分頁是否停止
set target-async on/off   # 同步或者異步調試，是否等待線程中止的信息


##############################################################################
# 進程調試
##############################################################################

info inferiors                       # 查看當前進程和 id
inferior {id}                        # 切換某個進程
kill inferior {id...}                # 殺死某個進程
set detach-on-fork on/off            # 設置當進程調用fork時gdb是否同時調試父子進程
set follow-fork-mode parent/child    # 設置當進程調用fork時是否進入子進程


##############################################################################
# 彙編調試
##############################################################################

info registers            # 打印普通寄存器
info all-registers        # 打印所有寄存器
print/x $pc               # 打印單個寄存器
stepi                     # 指令級別單步進入，可以簡寫為 si
nexti                     # 指令級別單步跳過，可以簡寫為 ni
display/i $pc             # 監控寄存器（每條單步完以後會自動打印值）
x/x &gx                   # 十六進制打印變量
info line 22              # 打印行號為 22 的內存地址信息
info line *0x2c4e         # 打印給定內存地址對應的源代碼和行號信息
disassemble {addr}        # 對地址進行反彙編，比如 disassemble 0x2c4e


##############################################################################
# 歷史信息
##############################################################################

show commands             # 顯示歷史命令 (gdb 4.0)
info editing              # 顯示歷史命令 (gdb 3.5)
ESC-CTRL-J                # 切換到 Vi 命令行編輯模式
set history expansion on  # 允許類 c-shell 的歷史
break class::member       # 在類成員處設置斷點
list class:member         # 顯示類成員代碼
ptype class               # 查看類包含的成員
print *this               # 查看 this 指針


##############################################################################
# 其他命令
##############################################################################

define command ... end    # 定義用戶命令
<return>                  # 直接按回車執行上一條指令
shell {command} [args]    # 執行 shell 命令
source {file}             # 從文件加載 gdb 命令
quit                      # 退出 gdb


##############################################################################
# GDB 前端
##############################################################################

gdb-tui                   使用 gdb -tui 啟動（或 ctrl-x ctrl-a 更換 CLI/TUI）
cgdb                      http://cgdb.github.io/
emacs                     http://gnu.org/software/emacs
gdbgui                    https://github.com/cs01/gdbgui
vimspector                https://github.com/puremourning/vimspector
termdebug                 https://github.com/vim/vim

GDB 圖形化前端評測        http://www.skywind.me/blog/archives/2036


##############################################################################
# References
##############################################################################

https://sourceware.org/gdb/current/onlinedocs/gdb/
https://kapeli.com/cheat_sheets/GDB.docset/Contents/Resources/Documents/index
http://www.yolinux.com/TUTORIALS/GDB-Commands.html
https://gist.github.com/rkubik/b96c23bd8ed58333de37f2b8cd052c30
http://security.cs.pub.ro/hexcellents/wiki/kb/toolset/gdb


# vim: set ts=4 sw=4 tw=0 noet ft=gdb:

